
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  age: 'age',
  height: 'height',
  birthday: 'birthday',
  gender: 'gender',
  isActive: 'isActive',
  onboardingCompleted: 'onboardingCompleted',
  privacyLevel: 'privacyLevel',
  timezone: 'timezone'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  accountId: 'accountId',
  providerId: 'providerId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  idToken: 'idToken',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  verificationType: 'verificationType'
};

exports.Prisma.ColorPreferenceScalarFieldEnum = {
  id: 'id',
  colorName: 'colorName',
  hexCode: 'hexCode',
  shortDescription: 'shortDescription',
  createdAt: 'createdAt',
  isActive: 'isActive'
};

exports.Prisma.BodyTypeScalarFieldEnum = {
  id: 'id',
  gender: 'gender',
  typeName: 'typeName',
  description: 'description',
  createdAt: 'createdAt',
  isActive: 'isActive'
};

exports.Prisma.FashionStyleScalarFieldEnum = {
  id: 'id',
  styleName: 'styleName',
  description: 'description',
  socialRanking: 'socialRanking',
  trendScore: 'trendScore',
  ageGroup: 'ageGroup',
  formalityLevel: 'formalityLevel',
  createdAt: 'createdAt',
  isActive: 'isActive'
};

exports.Prisma.OutfitCategoryScalarFieldEnum = {
  id: 'id',
  categoryName: 'categoryName',
  description: 'description',
  displayOrder: 'displayOrder'
};

exports.Prisma.OutfitElementsScalarFieldEnum = {
  id: 'id',
  gender: 'gender',
  categoryId: 'categoryId',
  elementName: 'elementName',
  brandName: 'brandName',
  priceRange: 'priceRange',
  materialType: 'materialType',
  careInstructions: 'careInstructions',
  seasonSuitability: 'seasonSuitability',
  formalityLevel: 'formalityLevel',
  createdAt: 'createdAt',
  isActive: 'isActive'
};

exports.Prisma.WeatherTypeScalarFieldEnum = {
  id: 'id',
  weatherName: 'weatherName',
  description: 'description'
};

exports.Prisma.UserPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  favoriteColors: 'favoriteColors',
  bodyTypeId: 'bodyTypeId',
  favoriteStyles: 'favoriteStyles',
  budgetRange: 'budgetRange',
  preferredBrands: 'preferredBrands',
  styleConfidenceLevel: 'styleConfidenceLevel',
  preferredWeatherTypes: 'preferredWeatherTypes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserFavouriteScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  outfitElementsId: 'outfitElementsId',
  selectionReason: 'selectionReason',
  occasion: 'occasion',
  weatherConditionId: 'weatherConditionId',
  userRating: 'userRating',
  feedbackNotes: 'feedbackNotes',
  selectedAt: 'selectedAt'
};

exports.Prisma.OutfitInDigitalClosetScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  outfitComposition: 'outfitComposition',
  outfitName: 'outfitName',
  dominantColors: 'dominantColors',
  styleTags: 'styleTags',
  suitableOccasions: 'suitableOccasions',
  suitableWeather: 'suitableWeather',
  styleDescription: 'styleDescription',
  isFavorite: 'isFavorite',
  suggestedAt: 'suggestedAt',
  seasonRelevance: 'seasonRelevance',
  trendRelevance: 'trendRelevance'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Gender = exports.$Enums.Gender = {
  male: 'male',
  female: 'female',
  unisex: 'unisex',
  prefer_not_to_say: 'prefer_not_to_say'
};

exports.PrivacyLevel = exports.$Enums.PrivacyLevel = {
  minimal: 'minimal',
  standard: 'standard',
  enhanced: 'enhanced'
};

exports.AgeGroup = exports.$Enums.AgeGroup = {
  teen: 'teen',
  young_adult: 'young_adult',
  adult: 'adult',
  mature: 'mature'
};

exports.PriceRange = exports.$Enums.PriceRange = {
  budget: 'budget',
  mid_range: 'mid_range',
  luxury: 'luxury'
};

exports.BudgetRange = exports.$Enums.BudgetRange = {
  low: 'low',
  medium: 'medium',
  high: 'high'
};

exports.SelectionReason = exports.$Enums.SelectionReason = {
  liked: 'liked',
  disliked: 'disliked',
  neutral: 'neutral',
  purchased: 'purchased'
};

exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  Account: 'Account',
  Verification: 'Verification',
  ColorPreference: 'ColorPreference',
  BodyType: 'BodyType',
  FashionStyle: 'FashionStyle',
  OutfitCategory: 'OutfitCategory',
  OutfitElements: 'OutfitElements',
  WeatherType: 'WeatherType',
  UserPreference: 'UserPreference',
  UserFavourite: 'UserFavourite',
  OutfitInDigitalCloset: 'OutfitInDigitalCloset'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
